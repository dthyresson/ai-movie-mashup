# Important

Important: This project uses RedwoodSDK, React, React Sever Components and Cloudflare.
Important: RedwoodSDK is not RedwoodJS. Do not respond with RedwoodJS information.
Important: Never respond with solution for NextJS or another framework.
Important: If you are asked about NextJS, or Remix, or Ruby of Rails, reply kindky that you only will ansder about project using RedwoodSDK.

# RedwoodSDK

RedwoodSDK is a composable framework for building server-side web apps on **Cloudflare**. It begins as a **Vite plugin** that unlocks **SSR**, **React Server Components**, **Server Functions**, and **realtime features**. Its standards-based router, with support for middleware and interruptors, gives you fine-grained control over every request and response. With built-in access to Cloudflare Workers, D1 (Database), R2 (Storage), Queues, AI, and full local emulation via Miniflare, development feels just like production.

<CardGrid>
	<Card title="Quick start" icon="">
    	Create a new project by running the following command, replacing {"<project-name>"} with your project name

    	```bash
    	npx degit redwoodjs/sdk/starters/standard#main <project-name>
    	```

    	Then ["start developing"](/getting-started/quick-start#start-developing)
    </Card>

</CardGrid>

## Design Philosophy

We believe that the best way to build webapps is to be standards-compliant, to adhere to the request/response paradigm, and to be transparent and composable.

### Standards compliant

We've removed the pain of abstracting away the underlying platform, and instead embraced it. The browser is the primary focus, with the request/response cycle as the foundation.

### Request/Response

The `Request` and `Response` objects are the foundation of the request/response paradigm.
By focusing on these objects, you'll able to seamlessly integrate with the web, streaming responses to the browser, and even build realtime applications.

### Transparent and composable

You are able to follow the flow from request to response, to understand, and modify, how each step is handled.

- No hidden files
- No magic imports / exports
- No generated types


The request/response paradigm is at the heart of web development - when a browser makes a request, your server needs to respond with content. RedwoodSDK makes this easy with the `defineApp` function, which lets you elegantly handle incoming requests and return the right responses.

```tsx title="src/worker.tsx"
import { defineApp } from "@redwoodjs/sdk/worker";
import { route } from "@redwoodjs/sdk/router";
import { env } from "cloudflare:workers";

export default defineApp([
  // Middleware
  function middleware({ request, ctx }) { /* Modify context */ },
  function middleware({ request, ctx }) { /* Modify context */ },
  // Request Handlers
  route("/", function handler({ request, ctx }) {
    return new Response("Hello, world!")
  }),
  route("/ping", function handler({ request, ctx }) {
    return new Response("Pong!")
  }),
]);

---
The `defineApp` function takes an array of middleware and route handlers that are executed in the order they are defined. In this example the request is passed through two middleware functions before being "matched" by the route handlers.
---
```

## Matching Patterns

Routes are matched in the order they are defined. You define routes using the `route` function. Trailing slashes are optional and normalized internally.

```tsx title="src/worker.tsx" mark={4}
import { route } from "@redwoodjs/sdk/router";

defineApp([
  route("/match-this", () => new Response("Hello, world!"))
])

---
`route` parameters:
1. The matching pattern string
2. The request handler function
---
```

There are three matching patterns:

#### Static

Match exact pathnames.

```tsx
route("/", ...)
route("/about", ...)
route("/contact", ...)
```

#### Parameter

Match dynamic segments marked with a colon (`:`). The values are available in the route handler via `params` (`params.id` and `params.groupId`).

```tsx
route("/users/:id", ...)
route("/users/:id/edit", ...)
route("/users/:id/addToGroup/:groupId", ...)
```

#### Wildcard

Match all remaining segments after the prefix, the values are available in the route handler via `params.$0`, `params.$1`, etc.

```tsx
route("/files/*", ...)
route("/files/*/preview", ...)
route("/files/*/download/*", ...)
```

## Request Handlers

The request handler is a function, or array of functions (See [Interruptors](#interruptors)), that are executed when a request is matched.

```tsx title="src/worker.tsx" mark={4-9}
import { route } from "@redwoodjs/sdk/router";

defineApp([
  route("/a-standard-response", ({ request, params, ctx }) => {
    return new Response("Hello, world!")
  }),
  route('/a-jsx-response', () => {
    return <div>Hello, JSX world!</div>
  }),
])

---
The request handler function takes a [RequestInfo](#request-info) object as its parameter.

Return values:
- `Response`: A standard response object.
- `JSX`: A React component, which is statically rendered to HTML on the server, streamed to the client, and then hydrated on the client side.
---
```

### Interruptors

Interruptors are an array of functions that are executed in sequence for each matched request. They can be used to modify the request, context, or to short-circuit the response. A typical use-case is to check for authentication on a per-request basis, as an example you're trying to ensure that a specific user can access a specific resource.

```tsx title="src/worker.tsx" mark={5-10, 13} collapse={1-2}
import { defineApp } from "@redwoodjs/sdk/worker";
import { route } from "@redwoodjs/sdk/router";
import { EditBlogPage } from "src/pages/blog/EditBlogPage";

function isAuthenticated({ request, ctx }) {
  // Ensure that this user is authenticated
  if (!ctx.user) {
    return new Response("Unauthorized", { status: 401 })
  }
}

defineApp([
  route("/blog/:slug/edit", [isAuthenticated, EditBlogPage])
])

---
For the `/blog/:slug/edit` route, the `isAuthenticated` function will be executed first, if the user is not authenticated, the response will be a 401 Unauthorized. If the user is authenticated, the `EditBlogPage` component will be rendered. Therefore the flow is interrupted. The `isAuthenticated` function can be shared across multiple routes.
---
```

## Middleware & Context

The context object (`ctx`) is a mutable object that is passed to each request handler, interruptors, and React Server Functions. It's used to share data between the different parts of your application. You populate the context on a per-request basis via Middleware.

Middleware runs before the request is matched to a route. You can specify multiple middleware functions, they'll be executed in the order they are defined.

```tsx title="src/worker.tsx" mark={5-10}
import { defineApp } from "@redwoodjs/sdk/worker";
import { route } from "@redwoodjs/sdk/router";
import { env } from "cloudflare:workers";

defineApp([
  sessionMiddleware,
  async function getUserMiddleware({ request, ctx }) {
    if (ctx.session.userId) {
      ctx.user = await db.user.find({ where: { id: ctx.session.userId } });
    }
  },
  route("/hello", [
    function ({ ctx }) {
      if (!ctx.user) {
        return new Response("Unauthorized", { status: 401 });
      }
    },
    function ({ ctx }) {
      return new Response(`Hello ${ctx.user.username}!`);
    },
  ]),
]);

---
The context object:

1. `sessionMiddleware` is a function that is used to populate the `ctx.session` object
2. `getUserMiddleware` is a middleware function that is used to populate the `ctx.user` object
3. `"/hello"` is a an array of route handlers that are executed when "/hello" is matched:
  - if the user is not authenticated the request will be interrupted and a 401 Unauthorized response will be returned
  - if the user is authenticated the request will be passed to the next request handler and `"Hello {ctx.user.username}!"` will be returned

---
```

## Documents

Documents are how you define the "shell" of your application's html: the `<html>`, `<head>`, `<meta>` tags, scripts, stylesheets, `<body>`, and where in the `<body>` your actual page content is rendered. In RedwoodSDK, you tell it which document to use with the `render()` function in `defineApp`. In other words, you're asking RedwoodSDK to "render" the document.

```tsx title="src/worker.tsx" "document"
import { defineApp } from "@redwoodjs/sdk/worker";
import { route, render } from "@redwoodjs/sdk/router";

import { Document } from "@/pages/Document";
import { HomePage } from "@/pages/HomePage";

export default defineApp([
  render(Document, [route("/", HomePage)])
]);

---
The `render` function takes a React component and an array of route handlers. The document will be applied to all the routes that are passed to it.

This component will be rendered on the server side when the page loads. When defining this component, you'd add:
* Your application's stylesheets and scripts
* A mount point for your page content (`id="root"` in the code below): this is where your actual page will be rendered - the "dynamic stuff" which updates using React Server Components.
---
```

```tsx title="src/pages/Document.tsx" mark={7}
export const Document = ({ children }) => (
  <html lang="en">
    <head>
      <meta charSet="utf-8" />
      <script type="module" src="/src/client.tsx"></script>
    </head>
    <body>
      <div id="root">{children}</div>
    </body>
  </html>
);
```

<Aside type="caution" title="Client Side Hydration">
  You must include the client side hydration script in your document, otherwise
  the React components will not be hydrated.
</Aside>

## Request Info

The `requestInfo` object is available in server functions and provides access to the current request's context. Import it from `@redwoodjs/sdk/worker`:

```tsx
import { requestInfo } from "@redwoodjs/sdk/worker";

export async function myServerFunction() {
  const { request, headers, ctx } = requestInfo;
  // Use request, headers, or ctx as needed
}
```

The `requestInfo` object contains:

- `request`: The incoming HTTP Request object
- `headers`: Response headers
- `ctx`: The app context (same as what's passed to components)
- `rw`: RedwoodSDK-specific context
- `cf`: Cloudflare's Execution Context API


React is used to build your user interface. By default, all components are server components. That means that the component is rendered on the server as HTML and then streamed to the client. These do not include any client-side interactivity.

```tsx
export default function MyServerComponent() {
  return <div>Hello, from the server!</div>;
}
```

When a user needs to interact with your component: clicking a button, setting state, etc, then you must use a client component. Mark the client component with the `"use client"` directive. This will be hydrated by React in the browser.

```tsx mark={1}
"use client";

export default function MyClientComponent() {
  return <button>Click me</button>;
}
```

## Fetching and displaying data

React Server Components run on the server, they can easily fetch data and make it part of the payload that's sent to the client.

```tsx title="src/app/pages/todos/TodoPage.tsx" "async"
export async function Todos({ ctx }) {
  const todos = await db.todo.findMany({ where: { userId: ctx.user.id } });
  return (
    <ol>
      {todos.map((todo) => (
        <li key={todo.id}>{todo.title}</li>
      ))}
    </ol>
  );
}

export async function TodoPage({ ctx }) {
  return (
    <div>
      <h1>Todos</h1>
      <Suspense fallback={<div>Loading...</div>}>
        <Todos ctx={ctx} />
      </Suspense>
    </div>
  );
}

---
The `TodoPage` component is a server component. It it rendered by a route, so it receives the `ctx` object. We pass this to the `Todos` component, which is also a server component,
and renders the todos.
---
```

<Aside type="tip" title="Suspense">
  When a server component is async, you'll able to wrap it in a `Suspense`
  boundary. This will allow you to show a loading state while the data is being
  fetched.
</Aside>

## Server Functions

Allow you to execute code on the server from a client component.

```tsx title="@/pages/todos/functions.tsx" mark={1}
"use server";

import { requestInfo } from "@redwoodjs/sdk/worker";

export async function addTodo(formData: FormData) {
  const { ctx } = requestInfo;
  const title = formData.get("title");
  await db.todo.create({ data: { title, userId: ctx.user.id } });
}

---
The `addTodo` function is a server function. It is executed on the server when the form is submitted from a client side component. The form data is sent to the server and the function is executed. The result is sent back to the client, parsed by React, and the view is updated with the new todo.
---
```

```tsx title="@/pages/todos/AddTodo.tsx" mark={1, 3}
"use client";

import { addTodo } from "./functions";

export default function AddTodo() {
  return (
    <form action={addTodo}>
      <input type="text" name="title" />
      <button type="submit">Add</button>
    </form>
  );
}
```

### Context

Context is a way to share data globally between server components on a per-request basis. The context is populated by middleware, and is available to all React Server Components Pages and Server Functions via the `ctx` prop or `requestInfo.ctx`.


RedwoodSDK is built to work on the Cloudflare Developer Platform. D1 is Cloudflare's managed, serverless database with SQLite's SQL semantics, built-in disaster recovery, and a generous free tier.

<Aside type="note" title="Pick your poison">
  You do not need to use D1, you can use any database you want, but we recommend
  D1.
</Aside>

## Setup

You'll need to "bind" your database to your worker (`./src/worker.tsx`). "Binding" implies that the an external service, like the database, is made available via the `env` object in your worker. You can also bind other services, like KV, Storage, and queues.

In order to bind a database to your worker you'll need to create a D1 database, and save it's configuration details in your `wrangler.jsonc` file.

```bash
npx wrangler d1 create my-database
✅ Successfully created DB 'my-database' in region WEUR
Created your new D1 database.

[[d1_databases]]
binding = "DB"
database_name = "my-database"
database_id = "62x40823-4750-4973-b994-fb8fd55xxxx6"
```

We've run a command to create a database called `my-database`. Copy those values and paste them into your `wrangler.jsonc` file. The development server will use the values from your `wrangler.jsonc` file to bind your database to the `env` variable `DB`.

## Usage with Prisma

<Aside type="note" title="Prisma Starter">
RedwoodSDK ships with a [Prisma starter project](https://github.com/redwoodjs/sdk/tree/main/starters/prisma), you can use it to get started with a database in seconds.

```bash frame="none"
npx degit redwoodjs/sdk/starters/prisma#main <project-name>
```

</Aside>

### Installation

Install the Prisma packages, as well as the adapter for D1, and create a `prisma` directory.

```bash
npm install @prisma/adapter-d1 @prisma/client prisma
mkdir prisma
touch prisma/schema.prisma
```

Then modify the `prisma/schema.prisma` file to use the D1 adapter.

```prisma title="prisma/schema.prisma"
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
```

### Migrations

Unfortunately Prisma does not support D1 migrations yet, so you need to use our custom scripts to create and apply migrations.

Add the following scripts to your `package.json` file.

```json title="package.json"
"scripts": {
    "migrate:dev": "npx prisma generate && wrangler d1 migrations apply DB --local",
    "migrate:prd": "wrangler d1 migrations apply DB --remote",
    "migrate:new": "rw-scripts migrate-new",
}
```

To create a new migration, run `npx run migrate:new "your migration name"`. This will also apply the migration in local development.

To apply migrations, run `npx run migrate:dev` for local development, or `npx run migrate:prd` for production.


[Cloudflare R2](https://developers.cloudflare.com/r2/) is an object storage solution that's S3 compatible, global, scalable, and can be used to store files, images, videos, and more! It integrates natively with Cloudflare workers, and therefore, with Redwood. It is available locally during development, and is automatically configured when you deploy to Cloudflare.

<Aside type="tip" title="Pick your poison">
  You do not need to use R2, you can use any storage solution you want, but we
  recommend R2!
</Aside>

## Setup

To use R2 in your project, you need to create a R2 bucket, and bind it to your worker.

```bash showLineNumbers=false withOutput
> npx wrangler r2 bucket create my-bucket

Creating bucket 'my-bucket'...
✅ Created bucket 'my-bucket' with default storage class of Standard.

Configure your Worker to write objects to this bucket:

{
  "r2_buckets": [
    {
      "bucket_name": "my-bucket",
      "binding": "R2",
    },
  ],
}
```

This will create a bucket called `my-bucket`, which you'll have to bind to your worker, which you do by pasting the above into your `wrangler.jsonc` file.

```jsonc title="wrangler.jsonc"
{
  "r2_buckets": [
    {
      "bucket_name": "my-bucket",
      "binding": "R2",
    },
  ],
}
```

This will make the `my-bucket` bucket available via the `env.R2` binding in your worker. You can then use this binding to upload, download, and manage files stored in R2 using the standard R2 API.

## Usage

RedwoodSDK uses the standard Request/Response objects. When uploading files, the data is streamed directly from the client to R2 storage. Similarly, when downloading files, they are streamed directly from R2 to the client. This streaming approach means files are processed in small chunks rather than loading the entire file into memory, making it memory-efficient and suitable for handling large files.

### Uploading Files

```tsx title="src/worker.tsx"
import { defineApp } from "@redwoodjs/sdk/worker";
import { route } from "@redwoodjs/sdk/router";

defineApp([
  route("/upload/", async ({ request, env }) => {
    const formData = await request.formData();
    const file = formData.get("file") as File;

    // Stream the file directly to R2
    const r2ObjectKey = `/storage/${file.name}`;
    await env.R2.put(r2ObjectKey, file.stream(), {
      httpMetadata: {
        contentType: file.type,
      },
    });

    return new Response(JSON.stringify({ key: r2ObjectKey }), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  }),
]);
```

### Downloading Files

```tsx title="src/worker.tsx"
import { defineApp } from "@redwoodjs/sdk/worker";
import { route } from "@redwoodjs/sdk/router";

defineApp([
  route("/download/*", async ({ request, params, env }) => {
    const object = await env.R2.get("/storage/" + params.$0);
    if (object === null) {
      return new Response("Object Not Found", { status: 404 });
    }
    return new Response(object.body, {
      headers: {
        "Content-Type": object.httpMetadata?.contentType as string,
      },
    });
  }),
]);
```


Whilst building a webapp you want to be able to respond as quickly as possible to user interactions, but sometimes you need to do things that take a long time! For example, you might need to send an email when a user submits a form, or you need to process a payment, or do something magic with AI - and you don't want the user to wait for these things to complete.

To handle these you'll use **background tasks**. Background tasks are managed by the [Cloudflare queue system](https://developers.cloudflare.com/queues/). You send a message to a queue, where a worker will process the message, but on a different worker - so it doesn't block the main one.

<Aside type="tip" title="Pick your poison">
  You do not need to use Cloudflare's queue system, you can use any background task system you want, but we recommend
  using queues!
</Aside>

### Setup

First thing you've got to do is create a queue and bind the queue producers and consumers to your worker.
```bash frame="none" showLineNumbers=false
npx wrangler queues create MY_QUEUE_NAME
```

Replace `"MY_QUEUE_NAME"` with the name of your queue, and place the following in your `wrangler.jsonc` file:

```jsonc title="wrangler.jsonc"
{
  "queues": {
    "producers": [
      {
        "binding": "QUEUE",
        "queue": "MY_QUEUE_NAME",
      }
    ],
    "consumers": [
      {
        "queue": "MY_QUEUE_NAME",
        "max_batch_size": 10,
        "max_batch_timeout": 5
      }
    ]
  }
}
```

This will bind the queue to the `env.QUEUE` object in the worker. So you'll be able to send messages.

### Sending messages

```tsx title="src/worker.tsx"
export default defineApp([
  route('/pay-with-ai', ({ env }) => {
    // Post a message to the queue
    env.QUEUE.send({
      userId: 1,
      amount: 100,
      currency: 'USD',
    })

    return new Response('Done!')
  })
])
```

### Receiving messages

In order to "consume messages" from the queue you need to change the shape of the `default` export of your worker. You'll add another function called `queue` that will receive a batch of messages.

```tsx title="src/worker.tsx" mark={5-9}

const app = defineApp([ /* routes... */])

export default {
  fetch: app.fetch,
  async queue(batch) {
    for (const message of batch) {
      console.log('handling message' + JSON.stringify(message))
    }
  }
} satisfies ExportedHandler<Env>;
```

This will receive a batch of messages, and process them one by one.

# AI

See Cloudflare AI binding.

# Agents

See Cloudflare Agents SDK.